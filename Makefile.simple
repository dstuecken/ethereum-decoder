# Simple Makefile for building without CMake using manual dependencies  
# Usage: make -f Makefile.simple
# Note: Run ./install_dependencies.sh first to install dependencies

CXX = g++

# Detect OpenSSL path (macOS Homebrew vs system)
OPENSSL_PREFIX := $(shell brew --prefix openssl 2>/dev/null || echo /usr/local)

# Manual dependency paths
DEPS_DIR = deps
SPDLOG_DIR = $(DEPS_DIR)/spdlog
NLOHMANN_JSON_DIR = $(DEPS_DIR)/nlohmann-json
CLICKHOUSE_CPP_DIR = $(DEPS_DIR)/clickhouse-cpp
ABSEIL_DIR = $(DEPS_DIR)/abseil-cpp

# Parquet support (optional) - set ENABLE_PARQUET=1 to enable
ifdef ENABLE_PARQUET
# Use external PARQUET_CFLAGS/PARQUET_LDFLAGS if provided, otherwise use local build
ifndef PARQUET_CFLAGS
ARROW_DIR = $(DEPS_DIR)/arrow
PARQUET_CFLAGS = -DENABLE_PARQUET -I$(ARROW_DIR)/cpp/src -I$(ARROW_DIR)/cpp/build/src
endif
ifndef PARQUET_LDFLAGS
PARQUET_LDFLAGS = -L$(ARROW_DIR)/cpp/build/release -larrow
endif
else
PARQUET_CFLAGS = 
PARQUET_LDFLAGS =
endif

CXXFLAGS = -std=c++17 -Wall -O2 -I./app/ethereum_decoder/include \
           -I$(SPDLOG_DIR)/include \
           -I$(NLOHMANN_JSON_DIR)/include \
           -I$(CLICKHOUSE_CPP_DIR) \
           -I$(ABSEIL_DIR) \
           $(PARQUET_CFLAGS) \
           -I$(OPENSSL_PREFIX)/include

LDFLAGS = -L$(SPDLOG_DIR)/build -lspdlog \
          -L$(CLICKHOUSE_CPP_DIR)/build/clickhouse -lclickhouse-cpp-lib \
          -L$(CLICKHOUSE_CPP_DIR)/build/contrib/lz4/lz4 -llz4 \
          -L$(CLICKHOUSE_CPP_DIR)/build/contrib/zstd/zstd -lzstdstatic \
          -L$(CLICKHOUSE_CPP_DIR)/build/contrib/cityhash/cityhash -lcityhash \
          $(PARQUET_LDFLAGS) \
          -L$(OPENSSL_PREFIX)/lib -lssl -lcrypto \
          -pthread 

# Source files
SOURCES = app/ethereum_decoder/src/decoding/abi_parser.cpp \
          app/ethereum_decoder/main.cpp \
          app/ethereum_decoder/src/decoding/type_decoder.cpp \
          app/ethereum_decoder/src/utils.cpp \
          app/ethereum_decoder/src/crypto/keccak256_simple.cpp \
          app/ethereum_decoder/src/json/json_decoder.cpp \
          app/ethereum_decoder/src/decoding/log_data.cpp

OBJECTS = $(SOURCES:.cpp=.o)

# Targets
all: bin/decode_log bin/test_decoder bin/decode_clickhouse

# Create directories
bin:
	mkdir -p bin

lib:
	mkdir -p lib

# Build the library
lib/libethereum_decoder.a: $(OBJECTS) | lib
	ar rcs $@ $(OBJECTS)

# Build the decode_log application
bin/decode_log: app/decode_log/main.cpp app/decode_log/src/decode_log_arg_parser.cpp lib/libethereum_decoder.a | bin
	$(CXX) $(CXXFLAGS) -I./app/decode_log app/decode_log/main.cpp app/decode_log/src/decode_log_arg_parser.cpp -Llib -lethereum_decoder -o $@

# Build the tests
bin/test_decoder: test/test_decoder.cpp lib/libethereum_decoder.a | bin
	$(CXX) $(CXXFLAGS) $< -Llib -lethereum_decoder -o $@

# Build the ClickHouse decoder with its local argument parser and clickhouse sources
bin/decode_clickhouse: app/decode_clickhouse/main.cpp app/decode_clickhouse/src/decode_clickhouse_arg_parser.cpp app/decode_clickhouse/src/clickhouse/clickhouse_client.cpp app/decode_clickhouse/src/clickhouse/clickhouse_ethereum.cpp app/decode_clickhouse/src/clickhouse/clickhouse_query_config.cpp app/decode_clickhouse/src/parquet/parquet_database_writer.cpp app/decode_clickhouse/src/log-writer/database_writer.cpp app/decode_clickhouse/src/log-writer/clickhouse_writer.cpp app/decode_clickhouse/src/progress_display.cpp lib/libethereum_decoder.a | bin
	$(CXX) $(CXXFLAGS) -I./app/decode_clickhouse app/decode_clickhouse/main.cpp app/decode_clickhouse/src/decode_clickhouse_arg_parser.cpp app/decode_clickhouse/src/clickhouse/clickhouse_client.cpp app/decode_clickhouse/src/clickhouse/clickhouse_ethereum.cpp app/decode_clickhouse/src/clickhouse/clickhouse_query_config.cpp app/decode_clickhouse/src/parquet/parquet_database_writer.cpp app/decode_clickhouse/src/log-writer/database_writer.cpp app/decode_clickhouse/src/log-writer/clickhouse_writer.cpp app/decode_clickhouse/src/progress_display.cpp -Llib -lethereum_decoder $(LDFLAGS) -o $@

# Compile source files
%.o: %.cpp
	$(CXX) $(CXXFLAGS) -c $< -o $@

# Clean build artifacts
clean:
	rm -f app/ethereum_decoder/src/*.o app/ethereum_decoder/src/crypto/*.o app/ethereum_decoder/src/json/*.o app/ethereum_decoder/src/decoding/*.o app/ethereum_decoder/src/log-writer/*.o
	rm -f app/decode_clickhouse/src/*.o app/decode_clickhouse/src/parquet/*.o app/decode_clickhouse/src/log-writer/*.o app/decode_clickhouse/src/clickhouse/*.o
	rm -f app/decode_log/src/*.o
	rm -rf bin lib

# Run tests
test: bin/test_decoder
	./bin/test_decoder

.PHONY: all clean test bin lib